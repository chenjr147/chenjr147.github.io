<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on kevin</title>
    <link>https://blog.chenjr.top/post/</link>
    <description>Recent content in Posts on kevin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 04 Jul 2021 13:52:42 +0800</lastBuildDate><atom:link href="https://blog.chenjr.top/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode 第 248 场周赛</title>
      <link>https://blog.chenjr.top/post/leetcode-weekly-248/</link>
      <pubDate>Sun, 04 Jul 2021 13:52:42 +0800</pubDate>
      
      <guid>https://blog.chenjr.top/post/leetcode-weekly-248/</guid>
      <description>起晚了没赶上:(
Q1. 基于排列构建数组 思路 阅读理解。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14  // Algorithm: simulation // Time Complexity: O(n), n = nums.size() // Space Complexity: O(n) class Solution { public: vector&amp;lt;int&amp;gt; buildArray(vector&amp;lt;int&amp;gt; &amp;amp;nums) { int n = nums.size(); vector&amp;lt;int&amp;gt; ans(n); for (int i = 0; i &amp;lt; n; ++i) { ans[i] = nums[nums[i]]; } return ans; } };   Q2. 消灭怪物的最大数量 思路 在 $t_0(t_0 \in \mathbb{Z})$ 时刻，我们可以消灭到达时间为 $(t_0, \infty)$ 的怪物。</description>
    </item>
    
    <item>
      <title>LeetCode 第 247 场周赛</title>
      <link>https://blog.chenjr.top/post/leetcode-weekly-247/</link>
      <pubDate>Thu, 01 Jul 2021 13:52:42 +0800</pubDate>
      
      <guid>https://blog.chenjr.top/post/leetcode-weekly-247/</guid>
      <description>Q1. 两个数对之间的最大乘积差 思路 注意到数据范围 1 &amp;lt;= nums[i] &amp;lt;= 10^4，可以想到使用排序解决本问题。
代码 1 2 3 4 5 6 7  # Algorithm: sort + greed # Time Complexity: O(n), n = len(nums) # Space Complexity: O(1) class Solution: def maxProductDifference(self, nums: List[int]) -&amp;gt; int: nums.sort() return nums[-1] * nums[-2] - nums[0] * nums[1]   Q2. 循环轮转矩阵 思路 模拟即可，注意细节。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  # Algorithm: simulation # Time Complexity: O(n * m), n = len(grid), m = len(grid[0]) # Space Complexity: O(n + m) class Solution: def rotateGrid(self, grid: List[List[int]], k: int) -&amp;gt; List[List[int]]: n, m = len(grid), len(grid[0]) for i in range(ceil(min(n, m) / 2)): nums = list() x = y = i # x, y = i, i while y &amp;lt; m - i - 1: nums.</description>
    </item>
    
    <item>
      <title>LeetCode 第 55 场双周赛</title>
      <link>https://blog.chenjr.top/post/leetcode-biweekly-55/</link>
      <pubDate>Sun, 27 Jun 2021 13:52:42 +0800</pubDate>
      
      <guid>https://blog.chenjr.top/post/leetcode-biweekly-55/</guid>
      <description>Q1. 删除一个元素使数组严格递增 思路 观察并分析，可以发现仅存在两种合法情况，逐一考虑即可。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  // Algorithm: two pointer // Time Complexity: O(n), n = nums.size() // Space Complexity: O(1) class Solution { public: bool canBeIncreasing(vector&amp;lt;int&amp;gt; &amp;amp;nums) { int n = nums.size(); // if we remove nums[x], whether array is increasing  auto check = [&amp;amp;](int x) { int last = 0; for (int i = 0; i &amp;lt; n; ++i) { if (i !</description>
    </item>
    
    <item>
      <title>LeetCode 第 246 场周赛</title>
      <link>https://blog.chenjr.top/post/leetcode-weekly-246/</link>
      <pubDate>Sun, 20 Jun 2021 13:52:42 +0800</pubDate>
      
      <guid>https://blog.chenjr.top/post/leetcode-weekly-246/</guid>
      <description>Q1. 字符串中的最大奇数 思路 从后往前找到第一个奇数即可。
代码 1 2 3 4 5 6 7 8 9  class Solution: def largestOddNumber(self, num: str) -&amp;gt; str: # Algorithm: tranform and conquer # Time Complexity: O(n), n = len(num) # Space Complexity: O(1) for i in range(len(num) - 1, -1, -1): if int(num[i]) % 2 == 1: return num[:i + 1] return &amp;#34;&amp;#34;   Q2. 你完成的完整对局数 思路 模拟即可。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  class Solution: # Algorithm: simulation # Time Complexity: O(1) # Space Complexity: O(1) def isOver(self, startHour: int, startMinute: int, finishHour: int, finishMinute: int) -&amp;gt; int: return (startHour * 60 + startMinute) &amp;gt; (finishHour * 60 + finishMinute) def numberOfRounds(self, startTime: str, finishTime: str) -&amp;gt; int: startHour, startMinute = map(int, startTime.</description>
    </item>
    
    <item>
      <title>LeetCode 第 245 场周赛</title>
      <link>https://blog.chenjr.top/post/leetcode-weekly-245/</link>
      <pubDate>Tue, 15 Jun 2021 11:52:42 +0800</pubDate>
      
      <guid>https://blog.chenjr.top/post/leetcode-weekly-245/</guid>
      <description>Q1. 重新分配字符使所有字符串都相等 思路 字符串间的移动是任意的，那么我们只需要统计所有字符出现的次数，检查其是否为 $\texttt{words.size()}$ 的整数倍即可。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  class Solution { public: bool makeEqual(vector&amp;lt;string&amp;gt;&amp;amp; words) { // Algorithm: transform and conquer  // Time Complexity: O(n), n = sum(len(words[i]))  // Space Complexity: O(1)  array&amp;lt;int, 26&amp;gt; cnt{}; for (auto&amp;amp;&amp;amp; word : words) { for (auto&amp;amp;&amp;amp; ch : word) { cnt[ch - &amp;#39;a&amp;#39;] += 1; } } int n = static_cast&amp;lt;int&amp;gt;(words.</description>
    </item>
    
    <item>
      <title>LeetCode 第 54 场双周赛</title>
      <link>https://blog.chenjr.top/post/leetcode-biweekly-54/</link>
      <pubDate>Sun, 13 Jun 2021 23:52:42 +0800</pubDate>
      
      <guid>https://blog.chenjr.top/post/leetcode-biweekly-54/</guid>
      <description>Q1. 检查是否区域内所有整数都被覆盖 思路 模拟
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14  class Solution: def isCovered(self, ranges: List[List[int]], left: int, right: int) -&amp;gt; bool: # Algorithm: simulation # Time Complexity: O(n * m), n = right - left + 1, m = len(ranges) # Space Complexity: O(1) for cur in range(left, right + 1): ok = False for begin, end in ranges: if begin &amp;lt;= cur &amp;lt;= end: ok = True break if not ok: return False return True   Q2.</description>
    </item>
    
    <item>
      <title>剑指 offer</title>
      <link>https://blog.chenjr.top/post/sword-to-offer/</link>
      <pubDate>Thu, 10 Jun 2021 23:52:42 +0800</pubDate>
      
      <guid>https://blog.chenjr.top/post/sword-to-offer/</guid>
      <description>顺序参考牛客网 - 剑指 offer
JZ1. 二维数组中的查找 思路 从数组的右上或左下开始查找，可以有效地进行减治。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  class Solution { public: bool Find(int target, vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; array) { // Algorithm: decrease and conquer  // Time Complexity: O(n), n = array.size()  // Space Complexity: O(1)  // Corner Case:  if (array.</description>
    </item>
    
    <item>
      <title>LeetCode 第 244 场周赛</title>
      <link>https://blog.chenjr.top/post/leetcode-weekly-244/</link>
      <pubDate>Wed, 09 Jun 2021 23:52:42 +0800</pubDate>
      
      <guid>https://blog.chenjr.top/post/leetcode-weekly-244/</guid>
      <description>Q1. 判断矩阵经轮转后是否一致 思路 容易发现，旋转四次 mat 即回到了原始状态。
所以我们只需要至多旋转三次 mat ，每次判断是否和 target 一致即可。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  class Solution { public: bool findRotation(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; mat, vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; target) { // Algorithm: simulation  // Time Complexity: O(n^2), n = mat.size()  // Space Complexity: O(n^2), n = mat.size()  // Corner Case:  if (mat == target) return true; // Normal Case:  int n = static_cast&amp;lt;int&amp;gt;(mat.</description>
    </item>
    
    <item>
      <title>2019年计算机专业保研夏令营经历</title>
      <link>https://blog.chenjr.top/post/summer-camp/</link>
      <pubDate>Sun, 06 Jun 2021 17:39:06 +0800</pubDate>
      
      <guid>https://blog.chenjr.top/post/summer-camp/</guid>
      <description>前期准备 准备的内容其实无非也就是面试、机试：
 面试部分主要围绕英语口语以及听力、数学课、专业课和项目展开。具体的内容比较个性化，准备的话我推荐看一些市面上 关于程序员面试类的书籍 ，可以覆盖很大一部分关键的专业课知识，当然如果基础比较扎实的话，把自己学过的知识重新复习一遍是最好的啦。 机试部分主要就是算法题啦。我参考的书是 《王道论坛计算机考研机试指南》，这本书特别适合拿来入门机试，从头到尾刷完这本书的话应付大部分院校的机试基本没有什么问题了。另外可以提前去考一些院校认可的证书，在机试时可以抵分，比如 CSP 1、 PAT 2。  另外关于保研的资料搜集，也是很重要的工作，几个大的问题大概提一下：
方向选择 保研可以跨保，但是我个人是没有考虑过其他专业，本文也主要围绕计算机专业展开。
院校申请 能不能过夏令营或九推的初审，和自身的本科出身、成绩、科研、竞赛以及有否联系老师等诸多因素有关。九推难度一般会比夏令营小的多，如果夏令营被拒也不要气馁，九推还有机会，就算九推也凉，也注意留意短信电话邮件等，特别是快填系统那几天，鸽子满天飞，没有 offer 的就可以捡漏。每年的夏令营，热门院校的预录取名单都会有一部分交集，不少的人手里拿着不止一个 offer ，所以竞争就会激烈一些。我个人的建议是，拿到更好的 offer 就可以把其他的拒了，手里拿着一个保证有书读就行，太晚拒的话，对导师、学校、候补的同学、学弟学妹都会有影响。最后关于申请方面，这里列出来一些我没有通过初审的学校：
 清华计算机软院叉院、北大信科叉院、上交电院、南大LAMDA、中科院自动化所计算所 3 南大计算机 4 复旦计算机、同济计算机、武大计算机、中科院软件所、哈工大深圳、华科计算机 5  联系导师 我的入营除了清华深研院，其他学校都没有提前联系老师。不懒的话都提前联系一下是最好的，我就有些懒得花时间在这上面。很多学校被拒一部分原因可能就是没有提前联系老师，当然大部分原因应该还是本科出身以及自身实力不够。导师的信息可以在学校官网上找，看到合适的，可以到 谷歌学术 上了解他的学术水平，在 导师评价网 上了解为人，综合自己的实力选择一个合适的导师去联系。
硕士／直博 我参加的夏令营全部报的都是硕士项目。需要特别提醒的是，慎报直博，除非自己有强烈的读博意愿以及确定导师的人品、学术水平等没有问题 6，否则个人不是很推荐。想要了解更多的话可以参考：为什么现在有些研究生想退学？。
保研经历 因为过审的夏令营时间都基本错开了，所以我参加的夏令营算是比较多的。
南开大学人工智能学院 人工智能方向  时间：6月8日 — 6月9日。 安排：第一天参观，第二天面试。 面试内容：  中文自我介绍 聊了会项目，没有问具体的问题 问来南开的概率多大 最后一个英文问题：Do you like TianJin？    这是我参加的第一个夏令营，基本费用学校都给报销，学校环境也很舒服。前一天晚上在酒店背了很久的英文介绍，没想到第二天就只用中文。考核感觉特别简单，只有面试，而且没有具体的问题，面试全程更像是在聊天，老师也很 nice ，最后给我打了个很高的面试分。问过其他一些同学的情况，还有用英文介绍项目的，黑板写公式的，就比我硬核很多，可能面试还是有点看运气吧。
后面需要拿着面试成绩去联系老师，我联系的老师说需要确定去才给 offer ，当时有几个夏令营也通知说过了初审，想着去南开概率也不大，在6月底就放弃了南开。
中国人民大学高瓴人工智能学院 人工智能方向  时间：7月5日 — 7月7日 安排：第一天下午报道，第二天早上参观，下午笔试+机试，第三天早上面试。 笔试：两小时三道大题，C语言，手写代码，不允许用 STL 。  用三种循环实现 strncpy 二叉树按层次遍历，从底往上输出结果 7 文件操作：文件里有 $n$ 个数，可能有重复，输出按出现先后顺序整合后的结果，比如：$400, 20, 30, 400, 20$ ，就输出 $400, 400, 20, 20, 30$ 。设计算法，说明可以改进的地方以及时空复杂度。 8   机试：在 POJ 上考，可以看到实时 rank 以及 AC 情况，两道题四十分钟。  输出斐波那契数列 9 大整数的进制转换 10   面试：黑盒面试，不允许递简历，还有摄像头录像，非常公平公正。  英文群面：八个人一组，自我介绍 + 老师单问每个人一个简单的英文问题，记得的有：为什么选择人大？最喜欢的科目？为什么喜欢？有什么爱好？ 中文单面：时间很短，好像我五分钟多一点就出来了。  最喜欢哪门课？然后展开聊了一下。 问我的竞赛，说说算法，思路之类的。这里我自己扯了很久，好像把时间扯完了，老师就没问什么了。      夏令营体验非常棒，尽管就在一条街，也提供校内住宿，100饭卡，送了很多很好看的纪念品，特别用心。人大真的很棒，尽管学科评估计算机只是 B+ 的评级，但是经历过推免之后，感觉单看学科评估评价一个学校其实挺蠢的。高瓴有一些很厉害的导师，如果能跟到他们读研究生的话，其实还是蛮不错的啦。</description>
    </item>
    
  </channel>
</rss>
