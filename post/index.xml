<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Kevin's Blog</title><link>https://blog.chenjr.top/post/</link><description>Recent content in Posts on Kevin's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 17 Oct 2021 14:16:14 +0800</lastBuildDate><atom:link href="https://blog.chenjr.top/post/index.xml" rel="self" type="application/rss+xml"/><item><title>LeetCode 第 63 场双周赛</title><link>https://blog.chenjr.top/post/leetcode-biweekly-63/</link><pubDate>Sun, 17 Oct 2021 14:16:14 +0800</pubDate><guid>https://blog.chenjr.top/post/leetcode-biweekly-63/</guid><description>Q1. 使每位学生都有座位的最少移动次数 来源：力扣（LeetCode）
链接： https://leetcode-cn.com/problems/minimum-number-of-moves-to-seat-everyone/
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
思路 直觉上，我们应该对两个数组进行排序，然后从左到右每个学生依次坐在从左到右的各个位置上。
下面我们采用反证法进行证明，也即需要证明任意调换位置，最终的移动次数只会不变或增多。
假设 $a \leq b$, $c \leq d$, 则需要证明 $|a-c| + |b-d| \leq |a-d| + |b-c|$。
方便起见，同时保证结果不受影响，我们让四个数同减去 $a$，证明如下
$$ \begin{align} |c|+|b-d| &amp;amp;\leq |d|+|b-c| \
c^2+2|c||b-d| +(b-d)^2 &amp;amp;\leq d^2+2|d||b-c| +(b-c)^2 \
|c||b-d|-bd &amp;amp;\leq |d||b-c|-bc \
|c||b-d| - |d||b-c| &amp;amp;\leq b(d-c) \
|bc-cd|-|bd-cd| &amp;amp;\leq b|d-c| \
|bc-cd|-|bd-cd| &amp;amp;\leq |bd-bc| \end{align} $$
此外，我们知道 $-|x| \leq x \leq |x|, -|y| \leq y \leq |y|$，相加可得 $-(|x|+|y|) \leq x + y \leq |x|+|y|$，可得 $x+y \leq |x+y| \leq ||x|+|y||$。故 $|x+y|\leq|x|+|y|$；令$x=x-y$，可得$|x|\leq|x-y|+|y|$，也即 $|x|-|y|\leq|x-y|$。</description></item><item><title>LeetCode 第 262 场周赛</title><link>https://blog.chenjr.top/post/leetcode-weekly-262/</link><pubDate>Sun, 10 Oct 2021 17:23:21 +0800</pubDate><guid>https://blog.chenjr.top/post/leetcode-weekly-262/</guid><description>Q1. 至少在两个数组中出现的值 来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/two-out-of-three/
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
思路 集合。
代码 1 2 3 4 5 6 7 # Algorithm: set # Time Complexity: O(n), n = sum(len(nums{1..3})) # Space Complexity: O(n) class Solution: def twoOutOfThree(self, nums1: List[int], nums2: List[int], nums3: List[int]) -&amp;gt; List[int]: s1, s2, s3 = set(nums1), set(nums2), set(nums3) return list((s1 &amp;amp; s2) | (s2 &amp;amp; s3) | (s1 &amp;amp; s3)) Q2.</description></item><item><title>LeetCode 第 56 场双周赛</title><link>https://blog.chenjr.top/post/leetcode-biweekly-56/</link><pubDate>Fri, 16 Jul 2021 13:52:42 +0800</pubDate><guid>https://blog.chenjr.top/post/leetcode-biweekly-56/</guid><description>Q1. 统计平方和三元组的数目 来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/count-square-sum-triples/
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
思路 第一题无脑暴力 $O(n^3)$ 即可。
赛后补一份容易想到的 $O(n^2)$ 的双指针代码。评论区给出了复杂度更低的算法，但需要前置的数学知识，并不太容易在面试中想出来，在这里也就不再赘述了。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Algorithm: two pointers # Time Complexity: O(n^2) # Space Complexity: O(1) class Solution: def countTriples(self, n: int) -&amp;gt; int: ans = 0 for c in range(1, n + 1): target = c * c a, b = 1, c - 1 while a &amp;lt;= b: result = a * a + b * b if result == target: ans += 1 if a == b else 2 a += 1 b -= 1 elif result &amp;lt; target: a += 1 else: b -= 1 return ans Q2.</description></item><item><title>LeetCode 第 248 场周赛</title><link>https://blog.chenjr.top/post/leetcode-weekly-248/</link><pubDate>Sun, 04 Jul 2021 13:52:42 +0800</pubDate><guid>https://blog.chenjr.top/post/leetcode-weekly-248/</guid><description>起晚了没赶上:(
Q1. 基于排列构建数组 来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/build-array-from-permutation/
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
思路 阅读理解。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Algorithm: simulation // Time Complexity: O(n), n = nums.size() // Space Complexity: O(n) class Solution { public: vector&amp;lt;int&amp;gt; buildArray(vector&amp;lt;int&amp;gt; &amp;amp;nums) { int n = nums.size(); vector&amp;lt;int&amp;gt; ans(n); for (int i = 0; i &amp;lt; n; ++i) { ans[i] = nums[nums[i]]; } return ans; } }; Q2.</description></item><item><title>LeetCode 第 247 场周赛</title><link>https://blog.chenjr.top/post/leetcode-weekly-247/</link><pubDate>Thu, 01 Jul 2021 13:52:42 +0800</pubDate><guid>https://blog.chenjr.top/post/leetcode-weekly-247/</guid><description>Q1. 两个数对之间的最大乘积差 来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximum-product-difference-between-two-pairs/
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
思路 注意到数据范围 1 &amp;lt;= nums[i] &amp;lt;= 10^4，可以想到使用排序解决本问题。
代码 1 2 3 4 5 6 7 # Algorithm: sort + greed # Time Complexity: O(n), n = len(nums) # Space Complexity: O(1) class Solution: def maxProductDifference(self, nums: List[int]) -&amp;gt; int: nums.sort() return nums[-1] * nums[-2] - nums[0] * nums[1] Q2.</description></item><item><title>LeetCode 第 55 场双周赛</title><link>https://blog.chenjr.top/post/leetcode-biweekly-55/</link><pubDate>Sun, 27 Jun 2021 13:52:42 +0800</pubDate><guid>https://blog.chenjr.top/post/leetcode-biweekly-55/</guid><description>Q1. 删除一个元素使数组严格递增 来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/remove-one-element-to-make-the-array-strictly-increasing/
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
思路 观察并分析，可以发现仅存在两种合法情况，逐一考虑即可。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // Algorithm: two pointer // Time Complexity: O(n), n = nums.size() // Space Complexity: O(1) class Solution { public: bool canBeIncreasing(vector&amp;lt;int&amp;gt; &amp;amp;nums) { int n = nums.</description></item><item><title>LeetCode 第 246 场周赛</title><link>https://blog.chenjr.top/post/leetcode-weekly-246/</link><pubDate>Sun, 20 Jun 2021 13:52:42 +0800</pubDate><guid>https://blog.chenjr.top/post/leetcode-weekly-246/</guid><description>Q1. 字符串中的最大奇数 来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/largest-odd-number-in-string/
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
思路 从后往前找到第一个奇数即可。
代码 1 2 3 4 5 6 7 8 9 class Solution: def largestOddNumber(self, num: str) -&amp;gt; str: # Algorithm: tranform and conquer # Time Complexity: O(n), n = len(num) # Space Complexity: O(1) for i in range(len(num) - 1, -1, -1): if int(num[i]) % 2 == 1: return num[:i + 1] return &amp;#34;&amp;#34; Q2.</description></item><item><title>LeetCode 第 245 场周赛</title><link>https://blog.chenjr.top/post/leetcode-weekly-245/</link><pubDate>Tue, 15 Jun 2021 11:52:42 +0800</pubDate><guid>https://blog.chenjr.top/post/leetcode-weekly-245/</guid><description>Q1. 重新分配字符使所有字符串都相等 来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/redistribute-characters-to-make-all-strings-equal/
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
思路 字符串间的移动是任意的，那么我们只需要统计所有字符出现的次数，检查其是否为 $\texttt{words.size()}$ 的整数倍即可。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public: bool makeEqual(vector&amp;lt;string&amp;gt;&amp;amp; words) { // Algorithm: transform and conquer // Time Complexity: O(n), n = sum(len(words[i])) // Space Complexity: O(1) array&amp;lt;int, 26&amp;gt; cnt{}; for (auto&amp;amp;&amp;amp; word : words) { for (auto&amp;amp;&amp;amp; ch : word) { cnt[ch - &amp;#39;a&amp;#39;] += 1; } } int n = static_cast&amp;lt;int&amp;gt;(words.</description></item><item><title>LeetCode 第 54 场双周赛</title><link>https://blog.chenjr.top/post/leetcode-biweekly-54/</link><pubDate>Sun, 13 Jun 2021 23:52:42 +0800</pubDate><guid>https://blog.chenjr.top/post/leetcode-biweekly-54/</guid><description>Q1. 检查是否区域内所有整数都被覆盖 来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/check-if-all-the-integers-in-a-range-are-covered/
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
思路 模拟
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution: def isCovered(self, ranges: List[List[int]], left: int, right: int) -&amp;gt; bool: # Algorithm: simulation # Time Complexity: O(n * m), n = right - left + 1, m = len(ranges) # Space Complexity: O(1) for cur in range(left, right + 1): ok = False for begin, end in ranges: if begin &amp;lt;= cur &amp;lt;= end: ok = True break if not ok: return False return True Q2.</description></item><item><title>剑指 offer</title><link>https://blog.chenjr.top/post/sword-to-offer/</link><pubDate>Thu, 10 Jun 2021 23:52:42 +0800</pubDate><guid>https://blog.chenjr.top/post/sword-to-offer/</guid><description>剑指 Offer 03. 数组中重复的数字 来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
思路 原地哈希。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 // Algorithm: hash in-place // Time Complexity: O(n), n = len(nums) // Space Complexity: O(1) func findRepeatNumber(nums []int) int { n := len(nums) for i := range nums { if nums[nums[i]%n] &amp;gt;= n { return nums[i] % n } nums[nums[i]%n] += n } return -1 } 剑指 Offer 04.</description></item><item><title>LeetCode 第 244 场周赛</title><link>https://blog.chenjr.top/post/leetcode-weekly-244/</link><pubDate>Wed, 09 Jun 2021 23:52:42 +0800</pubDate><guid>https://blog.chenjr.top/post/leetcode-weekly-244/</guid><description>Q1. 判断矩阵经轮转后是否一致 来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/determine-whether-matrix-can-be-obtained-by-rotation/
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
思路 容易发现，旋转四次 mat 即回到了原始状态。
所以我们只需要至多旋转三次 mat ，每次判断是否和 target 一致即可。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public: bool findRotation(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; mat, vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; target) { // Algorithm: simulation // Time Complexity: O(n^2), n = mat.</description></item><item><title>2019年计算机专业保研夏令营经历</title><link>https://blog.chenjr.top/post/summer-camp/</link><pubDate>Sun, 06 Jun 2021 17:39:06 +0800</pubDate><guid>https://blog.chenjr.top/post/summer-camp/</guid><description>前期准备 准备的内容其实无非也就是面试、机试：
面试部分主要围绕英语口语以及听力、数学课、专业课和项目展开。具体的内容比较个性化，准备的话我推荐看一些市面上 关于程序员面试类的书籍 ，可以覆盖很大一部分关键的专业课知识，当然如果基础比较扎实的话，把自己学过的知识重新复习一遍是最好的啦。 机试部分主要就是算法题啦。我参考的书是 《王道论坛计算机考研机试指南》，这本书特别适合拿来入门机试，从头到尾刷完这本书的话应付大部分院校的机试基本没有什么问题了。另外可以提前去考一些院校认可的证书，在机试时可以抵分，比如 CSP 1、 PAT 2。 另外关于保研的资料搜集，也是很重要的工作，几个大的问题大概提一下：
方向选择 保研可以跨保，但是我个人是没有考虑过其他专业，本文也主要围绕计算机专业展开。
院校申请 能不能过夏令营或九推的初审，和自身的本科出身、成绩、科研、竞赛以及有否联系老师等诸多因素有关。九推难度一般会比夏令营小的多，如果夏令营被拒也不要气馁，九推还有机会，就算九推也凉，也注意留意短信电话邮件等，特别是快填系统那几天，鸽子满天飞，没有 offer 的就可以捡漏。每年的夏令营，热门院校的预录取名单都会有一部分交集，不少的人手里拿着不止一个 offer ，所以竞争就会激烈一些。我个人的建议是，拿到更好的 offer 就可以把其他的拒了，手里拿着一个保证有书读就行，太晚拒的话，对导师、学校、候补的同学、学弟学妹都会有影响。最后关于申请方面，这里列出来一些我没有通过初审的学校：
清华计算机软院叉院、北大信科叉院、上交电院、南大LAMDA、中科院自动化所计算所 3 南大计算机 4 复旦计算机、同济计算机、武大计算机、中科院软件所、哈工大深圳、华科计算机 5 联系导师 我的入营除了清华深研院，其他学校都没有提前联系老师。不懒的话都提前联系一下是最好的，我就有些懒得花时间在这上面。很多学校被拒一部分原因可能就是没有提前联系老师，当然大部分原因应该还是本科出身以及自身实力不够。导师的信息可以在学校官网上找，看到合适的，可以到 谷歌学术 上了解他的学术水平，在 导师评价网 上了解为人，综合自己的实力选择一个合适的导师去联系。
硕士／直博 我参加的夏令营全部报的都是硕士项目。需要特别提醒的是，慎报直博，除非自己有强烈的读博意愿以及确定导师的人品、学术水平等没有问题 6，否则个人不是很推荐。想要了解更多的话可以参考：为什么现在有些研究生想退学？。
保研经历 因为过审的夏令营时间都基本错开了，所以我参加的夏令营算是比较多的。
南开大学人工智能学院 人工智能方向 时间：6月8日 — 6月9日。 安排：第一天参观，第二天面试。 面试内容： 中文自我介绍 聊了会项目，没有问具体的问题 问来南开的概率多大 最后一个英文问题：Do you like TianJin？ 这是我参加的第一个夏令营，基本费用学校都给报销，学校环境也很舒服。前一天晚上在酒店背了很久的英文介绍，没想到第二天就只用中文。考核感觉特别简单，只有面试，而且没有具体的问题，面试全程更像是在聊天，老师也很 nice ，最后给我打了个很高的面试分。问过其他一些同学的情况，还有用英文介绍项目的，黑板写公式的，就比我硬核很多，可能面试还是有点看运气吧。</description></item></channel></rss>