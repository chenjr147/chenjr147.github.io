<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeetCode on kevin</title>
    <link>https://blog.chenjr.top/tags/leetcode/</link>
    <description>Recent content in LeetCode on kevin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 01 Jul 2021 13:52:42 +0800</lastBuildDate><atom:link href="https://blog.chenjr.top/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode 第 247 场周赛</title>
      <link>https://blog.chenjr.top/post/leetcode-weekly-247/</link>
      <pubDate>Thu, 01 Jul 2021 13:52:42 +0800</pubDate>
      
      <guid>https://blog.chenjr.top/post/leetcode-weekly-247/</guid>
      <description>Q1. 两个数对之间的最大乘积差 思路 注意到数据范围 1 &amp;lt;= nums[i] &amp;lt;= 10^4，可以想到使用排序解决本问题。
代码 1 2 3 4 5 6 7  # Algorithm: sort + greed # Time Complexity: O(n), n = len(nums) # Space Complexity: O(1) class Solution: def maxProductDifference(self, nums: List[int]) -&amp;gt; int: nums.sort() return nums[-1] * nums[-2] - nums[0] * nums[1]   Q2. 循环轮转矩阵 思路 模拟即可，注意细节。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  # Algorithm: simulation # Time Complexity: O(n * m), n = len(grid), m = len(grid[0]) # Space Complexity: O(n + m) class Solution: def rotateGrid(self, grid: List[List[int]], k: int) -&amp;gt; List[List[int]]: n, m = len(grid), len(grid[0]) for i in range(ceil(min(n, m) / 2)): nums = list() x = y = i # x, y = i, i while y &amp;lt; m - i - 1: nums.</description>
    </item>
    
    <item>
      <title>LeetCode 第 55 场双周赛</title>
      <link>https://blog.chenjr.top/post/leetcode-biweekly-55/</link>
      <pubDate>Sun, 27 Jun 2021 13:52:42 +0800</pubDate>
      
      <guid>https://blog.chenjr.top/post/leetcode-biweekly-55/</guid>
      <description>Q1. 删除一个元素使数组严格递增 思路 观察并分析，可以发现仅存在两种合法情况，逐一考虑即可。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  // Algorithm: two pointer // Time Complexity: O(n), n = nums.size() // Space Complexity: O(1) class Solution { public: bool canBeIncreasing(vector&amp;lt;int&amp;gt; &amp;amp;nums) { int n = nums.size(); // if we remove nums[x], whether array is increasing  auto check = [&amp;amp;](int x) { int last = 0; for (int i = 0; i &amp;lt; n; ++i) { if (i !</description>
    </item>
    
    <item>
      <title>LeetCode 第 246 场周赛</title>
      <link>https://blog.chenjr.top/post/leetcode-weekly-246/</link>
      <pubDate>Sun, 20 Jun 2021 13:52:42 +0800</pubDate>
      
      <guid>https://blog.chenjr.top/post/leetcode-weekly-246/</guid>
      <description>Q1. 字符串中的最大奇数 思路 从后往前找到第一个奇数即可。
代码 1 2 3 4 5 6 7 8 9  class Solution: def largestOddNumber(self, num: str) -&amp;gt; str: # Algorithm: tranform and conquer # Time Complexity: O(n), n = len(num) # Space Complexity: O(1) for i in range(len(num) - 1, -1, -1): if int(num[i]) % 2 == 1: return num[:i + 1] return &amp;#34;&amp;#34;   Q2. 你完成的完整对局数 思路 模拟即可。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  class Solution: # Algorithm: simulation # Time Complexity: O(1) # Space Complexity: O(1) def isOver(self, startHour: int, startMinute: int, finishHour: int, finishMinute: int) -&amp;gt; int: return (startHour * 60 + startMinute) &amp;gt; (finishHour * 60 + finishMinute) def numberOfRounds(self, startTime: str, finishTime: str) -&amp;gt; int: startHour, startMinute = map(int, startTime.</description>
    </item>
    
    <item>
      <title>LeetCode 第 248 场周赛</title>
      <link>https://blog.chenjr.top/post/leetcode-weekly-248/</link>
      <pubDate>Sun, 20 Jun 2021 13:52:42 +0800</pubDate>
      
      <guid>https://blog.chenjr.top/post/leetcode-weekly-248/</guid>
      <description>起晚了没赶上:(
Q1. 基于排列构建数组 思路 阅读理解。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14  // Algorithm: simulation // Time Complexity: O(n), n = nums.size() // Space Complexity: O(n) class Solution { public: vector&amp;lt;int&amp;gt; buildArray(vector&amp;lt;int&amp;gt; &amp;amp;nums) { int n = nums.size(); vector&amp;lt;int&amp;gt; ans(n); for (int i = 0; i &amp;lt; n; ++i) { ans[i] = nums[nums[i]]; } return ans; } };   Q2. 消灭怪物的最大数量 思路 在 $t_0(t_0 \in \mathbb{Z})$ 时刻，我们可以消灭到达时间为 $(t_0, t_0 + 1]$ 的怪物。</description>
    </item>
    
    <item>
      <title>LeetCode 第 245 场周赛</title>
      <link>https://blog.chenjr.top/post/leetcode-weekly-245/</link>
      <pubDate>Tue, 15 Jun 2021 11:52:42 +0800</pubDate>
      
      <guid>https://blog.chenjr.top/post/leetcode-weekly-245/</guid>
      <description>Q1. 重新分配字符使所有字符串都相等 思路 字符串间的移动是任意的，那么我们只需要统计所有字符出现的次数，检查其是否为 $\texttt{words.size()}$ 的整数倍即可。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  class Solution { public: bool makeEqual(vector&amp;lt;string&amp;gt;&amp;amp; words) { // Algorithm: transform and conquer  // Time Complexity: O(n), n = sum(len(words[i]))  // Space Complexity: O(1)  array&amp;lt;int, 26&amp;gt; cnt{}; for (auto&amp;amp;&amp;amp; word : words) { for (auto&amp;amp;&amp;amp; ch : word) { cnt[ch - &amp;#39;a&amp;#39;] += 1; } } int n = static_cast&amp;lt;int&amp;gt;(words.</description>
    </item>
    
    <item>
      <title>LeetCode 第 54 场双周赛</title>
      <link>https://blog.chenjr.top/post/leetcode-biweekly-54/</link>
      <pubDate>Sun, 13 Jun 2021 23:52:42 +0800</pubDate>
      
      <guid>https://blog.chenjr.top/post/leetcode-biweekly-54/</guid>
      <description>Q1. 检查是否区域内所有整数都被覆盖 思路 模拟
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14  class Solution: def isCovered(self, ranges: List[List[int]], left: int, right: int) -&amp;gt; bool: # Algorithm: simulation # Time Complexity: O(n * m), n = right - left + 1, m = len(ranges) # Space Complexity: O(1) for cur in range(left, right + 1): ok = False for begin, end in ranges: if begin &amp;lt;= cur &amp;lt;= end: ok = True break if not ok: return False return True   Q2.</description>
    </item>
    
    <item>
      <title>LeetCode 第 244 场周赛</title>
      <link>https://blog.chenjr.top/post/leetcode-weekly-244/</link>
      <pubDate>Wed, 09 Jun 2021 23:52:42 +0800</pubDate>
      
      <guid>https://blog.chenjr.top/post/leetcode-weekly-244/</guid>
      <description>Q1. 判断矩阵经轮转后是否一致 思路 容易发现，旋转四次 mat 即回到了原始状态。
所以我们只需要至多旋转三次 mat ，每次判断是否和 target 一致即可。
代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  class Solution { public: bool findRotation(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; mat, vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; target) { // Algorithm: simulation  // Time Complexity: O(n^2), n = mat.size()  // Space Complexity: O(n^2), n = mat.size()  // Corner Case:  if (mat == target) return true; // Normal Case:  int n = static_cast&amp;lt;int&amp;gt;(mat.</description>
    </item>
    
  </channel>
</rss>
